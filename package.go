package main

import (
	"fmt"
	"go/ast"
	"go/token"
	"io/ioutil"
	"strings"
	"sync"

	"golang.org/x/tools/imports"
)

func (r *runner) processPackage(
	enums, pkgName string,
	pkgAst *ast.Package, fset *token.FileSet,
	wg *sync.WaitGroup, errs chan<- error,
) {
	defer func() {
		wg.Done()
	}()

	fileWg := &sync.WaitGroup{}
	fileWg.Add(len(pkgAst.Files))
	types := make(chan string, len(pkgAst.Files))

	for filename, file := range pkgAst.Files {
		go r.processFile(filename, fset, file, fileWg, types, errs)
	}

	fileWg.Wait()
	close(types)

	typeStrs := []string{}
	for t := range types {
		typeStrs = append(typeStrs, t)
	}

	if len(typeStrs) == 0 {
		return
	}

	fmt.Println("hello world")

	pkgFile := fmt.Sprintf(
		"%s\npackage %s\nimport %q\n%s\n%s",
		"// Code generated by github.com/tomatosource/typegen; DO NOT EDIT.",
		pkgName,
		"github.com/google/uuid",
		enums,
		strings.Join(typeStrs, "\n"), // TODO sort
	)

	outputPath := fmt.Sprintf("typegen_%s.go", pkgName)

	formattedPkgFile, err := imports.Process(
		outputPath, []byte(pkgFile), nil,
	)
	if err != nil {
		errs <- fmt.Errorf("formatting pkg %q output file: %w", pkgName, err)
	}

	if err := ioutil.WriteFile(
		outputPath, formattedPkgFile, 0o644,
	); err != nil {
		errs <- fmt.Errorf("writing output file %q: %w", outputPath, err)
	}
}
